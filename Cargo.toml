[package]
name = "drone"
version = "0.1.0"
edition = "2021"
default-run = "drone"

[dependencies]
actix-files = { version = "=0.6.6", optional = true }
actix-web = { version = "=4.11.0", optional = true }
anyhow = "1.0.98"
bytes = "1.10.1"
ctrlc = "=3.4.7"
futures = { version = "0.3.31", optional = true }
gilrs = { version = "0.11.0", optional = true }
image = "=0.25.6"
optical-flow-lk = "=0.1.0"
serde = { version = "=1.0.219", features = ["derive"] }
serde_json = "=1.0.140"
serialport = { version = "=4.7.2", default-features = false, optional = true }
thiserror = "=2.0.12"
tokio = { version = "=1.45.0", features = [
    "net",
    "rt",
    "macros",
    "rt-multi-thread",
    "time",
    "io-util",
    "fs",
] }
tracing = "=0.1.41"
tracing-subscriber = "=0.3.19"

[lib]
path = "src/lib.rs"

[features]
default = []
real = ["serialport"]
udp_server = ["futures"]
dualsense = ["gilrs", "actix-web", "actix-files", "futures"]

# raspberry pi specific features
raspi = ["udp_server", "real"]
# control server features (for development)
control_server = ["actix-web", "actix-files", "futures"]
# development environment for raspi, does not contain serialport
raspi-development = ["udp_server"]
# development environment for control server, does not contain serialport
control_server_development = ["control_server"]

# This is used to send a drone command from the control server
[[bin]]
name = "control_server"
path = "src/bin/control_server.rs"
required-features = ["control_server", "dualsense"]

# This is used for testing dualsense alone
[[bin]]
name = "dualsense"
path = "src/bin/dualsense.rs"
required-features = ["dualsense"]
